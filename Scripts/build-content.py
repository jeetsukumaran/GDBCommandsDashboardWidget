#! /usr/bin/env python

###############################################################################
##  Copyright 2009 Jeet Sukumaran.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with this program. If not, see <http://www.gnu.org/licenses/>.
##
###############################################################################

import os
import sys
import shutil

css = """
div.section {
    font-family: Helvetica, Arial, sans;
    font-size: 11px;
    padding-left: 4px;
    padding-right: 0px;
    padding-top: 0;
    padding-bottom: 0;
}

p.sectiontitle {
    font-weight: bold;
    font-size: 12px;
}

p.subsectiontitle {
    font-weight: bold;
    font-style: italic;
    font-size: 10px;
}

div.commandhelp {
}

dl.commandhelp dt {
    font-family: AndaleMono, monospace;
    font-weight: bold;
    font-size: 10px;
    background: #EEEEEF;
    color: Navy;
    padding-top: 2px;
    padding-bottom: 2px;
}

dl.commandhelp dd {
    padding-bottom: 4px;
    font-size: 10px;
}

span.args {
    font-weight: normal;
    font-size: 10px;
    font-style: italic;
    color: purple;
    border-bottom: dotted 1px purple;
}

span.constargs {
    font-weight: normal;
    font-size: 10px;
    font-weight: bold;
    color: darkred;
}

span.optargs {
    font-weight: normal;
    font-style: normal;
    font-size: 10px;
    color: black;
}

span.commandshortcut {
    float: left;
    margin-right: 4px;
    width: 60px;
}

span.keygroup {
    font-family: AndaleMono, monospace;
    background: #EEEEEF;
    color: black;
    font-weight: bold;
    font-size: 10px;
}

span.specialkey {
    font-size: 8px;
}

code {
    font-family: AndaleMono, monospace;
    color: Navy;
    font-weight: bold;
    font-size: 10px;
}

div.coda {
    width: 260;
    font-family: Helvetica, Arial, sans;
    font-size: 11px;
    padding-top: 0px;
    padding-left: 5px;
    padding-right: 5px;
    padding-bottom: 5px;
    color: white;
}

div.coda p {
    wrap: normal;
}

div.coda .codatitle {
    font-size: 14px;
    font-weight: bold;
    display: block;
}

div.coda .codasubtitle {
    font-style: italic;
    display: block;
    margin-top: 2px;
}

div.coda .codaauthor {
    font-style: italic;
    display: block;
    margin-top: 2px;
}

div.coda a {
    color: orange;
}
"""

js_template = """\
// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    displayContent();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";
    populateCoda();
    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function readUrl(filename)
{
    var req = new XMLHttpRequest();

    url = "Content/" + filename;
    req.open("GET", url ,false);
    req.send(null);

    //req.responseText returns a string
    response = req.responseText;
    return response;
}

function populateCoda() {
    var coda_element = document.getElementById("codatext");
    var coda_content = readUrl("coda.html");
    coda_element.innerHTML = coda_content;
}

function displayAllSections() {
    var displayHTML = "";
%s
    document.getElementById('maincontent').innerHTML = displayHTML;
    document.getElementById("scrollArea").object.refresh();
}

function displayContent(event)
{
    // Insert Code
    var menu = document.getElementById("sectionMenu");
    selectedItem = menu.object.getValue();
    var contentFile = "";
    if (selectedItem == "All") {
        displayAllSections();
    } else {
        contentFile = selectedItem
        displayHTML = readUrl(contentFile);
        document.getElementById('maincontent').innerHTML = displayHTML;
        document.getElementById("scrollArea").object.refresh();
    }
}
"""

coda = """
<div class="coda">
    <span class="codatitle" >GNU Debugger Commands Widget v1.0.0</span>
    <span class="codasubtitle">http://www.jeetworks.org/gdbcommandswidget</span>
    <span class="codaauthor">Jeet Sukumaran</span>
    <span style="font-size: 9px;">This work is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version. This work is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See version 2 and version 3 of the GNU General Public License for more details.</span>
</div>
"""

GDB_REFDEFS = [

    ['Starting',
     '',
     'gdb',
     '<program> [<core>]',
     'Debug <span class="args">program</span> [using core dump <span class="args">core</span>].'],
    ['Starting',
     '',
     'gdb',
     '--args <program> <program-args>',
     'Debug <span class="args">program</span>, invoked with arguments <span class="args">program-args</span>.'],

    ['Stopping',
     '',
     'quit',
     '',
     'Exit GDB.'],
    ['Stopping',
     '<span class="keygroup"><span class="specialkey">CTL</span>-c</span>',
     '',
     '',
     'Interrupt command, or send to running process.'],

    ['Getting Help',
     '',
     'help',
     '',
     'List classes of commands.'],
    ['Getting Help',
     '',
     'help',
     '<command>',
     'Descriptions of command in <span class="args">command</span>.'],
    ['Getting Help',
     '',
     'help',
     '<class>',
     'Descriptions of commands in <span class="args">class</span>.'],

    ['Execution Context', '', 'run', '',
     'Start program with current argument list.'],
    ['Execution Context', '', 'run', '[<arglist>]',
     'Start program with arguments <span class="args">arglist</span>.'],
    ['Execution Context', '', 'show args', '',
     'Display argument list.'],
    ['Execution Context', '', 'set args', '<arglist>',
     'Specify <span class="args">arglist</span> for next run.'],
    ['Execution Context', '', 'set args', '',
     'Specify empty argument list for next run.'],
    ['Execution Context',  '',  'show env', '',
     'Show all environment variables.'],
    ['Execution Context',  '', 'show env', '<var>',
     'Show value of environmental variable <span class="args">var</span>.'],
    ['Execution Context',  '', 'set env', '<var> <string>',
     'Set value of environmental variable <span class="args">var</span> to <span class="args">string</span>.'],
    ['Execution Context',  '', 'unset env', '<var>',
     'Remove <span class="args">var</span> from environment.'],

    ['Execution Control', '',  'break', '[<file>:]<function>',
     'Set breakpoint at <span class="args">function</span> [in <span class="args">file</span>].'],
    ['Execution Control', '', 'backtrace',  '[<n>]',
     'Print trace of all frames in stack, or of <span class="args">n</span> frames.'],
    ['Execution Control', '', 'print', '<expr>',
     'Print value of expression, <span class="args">expr</span>.'],
    ['Execution Control', '', 'continue', '<count>',
     'Continue program execution; ignore this breakpoint next <span class="args">count</span> times if specified.'],
    ['Execution Control', '', 'next', '<count>',
     'Execute next statement, stepping over function calls; repeat <span class="args">count</span> times if specified.'],
    ['Execution Control', '',  'nexti', '<count>',
     'Next machine instruction rather than source line; repeat <span class="args">count</span> times if specified.'],
    ['Execution Control', '', 'step', '<count>',
     'Execute next statement, stepping int function calls; repeat <span class="args">count</span> times if specified.'],
    ['Execution Control', '',  'stepi', '<count>',
     'Step by machine instruction rather than source line; repeat <span class="args">count</span> times if specified.'],
    ['Execution Control', '',  'until', '<location>',
     'Run until next instruction (or <span class="args">location</span>).'],
    ['Execution Control', '',  'finish', '',
     'Run until stack frame returns.'],
    ['Execution Control', '',  'return', '[<expr>]',
     'Pop selected stack frame without executing [setting return value to <span class="args">expr</span>].'],
    ['Execution Control', '',  'signal', '<num>',
     'Resume execution with signal <span class="args">num</span> (none if 0).'],
    ['Execution Control', '',  'jump', '<line>',
     'Resume execution at source line <span class="args">line</span>.'],
    ['Execution Control', '',  'jump', '<addr>',
     'Resume execution at address <span class="args">addr</span>.'],
    ['Execution Control', '',  'set var=', '<expr>',
     'Evaluate <span class="args">expr</span> without displaying it; use for altering program variables.'],

    ['Shell',
     '',
     'cd',
     '<dir>',
     'Change working directory to <span class="args">dir</span>.'],
    ['Shell',
     '',
     'pwd',
     '',
     'Print working directory.'],
    ['Shell',
     '',
     'make',
     '...',
     'Call &quot;<code>make</code>&quot;.'],
    ['Shell',
     '',
     'shell',
     '<cmd>',
     'Run arbitrary command string <span class="args">cmd</span>.'],


    ['Breakpoints and Watchpoints',
     '',
     'break',
     '[<file>:]<line>',
     'Set breakpoint at <span class="args">line</span> in <span class="args">file</span>. E.g. &quot;<code>break main.c:37</code>&quot;'],
    ['Breakpoints and Watchpoints',
     '',
     'break',
     '[<file>:]<function>',
     'Set breakpoint at <span class="args">function</span> in <span class="args">file</span>. E.g. &quot;<code>break main.c:calc</code>&quot;'],
    ['Breakpoints and Watchpoints',
     '',
     'break',
     '+<offset>',
     'Set breakpoint at <span class="args">offset</span> lines from current stop.'],
    ['Breakpoints and Watchpoints',
     '',
     'break',
     '-<offset>',
     'Set breakpoint at <span class="args">offset</span> lines before current stop.'],
    ['Breakpoints and Watchpoints',
     '',
     'break',
     '+<addr>',
     'Set breakpoint at address <span class="args">addr</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'break',
     '+<offset>',
     'Set breakpoint at next instruction.'],
    ['Breakpoints and Watchpoints',
     '',
     'break ... if',
     '<expr>',
     'Break conditionally on non-zero expression.'],
    ['Breakpoints and Watchpoints',
     '',
     'cond',
     '<n> [<expr>]',
     'New conditional expression on breakpoint <span class="args">n</span>; make unconditional if no <span class="args">expr</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'tbreak',
     '...',
     'Temporary breakpoint; disable when reached.'],
    ['Breakpoints and Watchpoints',
     '',
     'rbreak',
     '<regexp>',
     'Break on all functions matching <span class="args">regexp</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'watch',
     '<expr>',
     'Set a watchpoint for expression <span class="args">expr</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'catch',
     '<x>',
     'Break at C++ handler for exception <span class="args">x</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'info break',
     '',
     'Show defined breakpoints.'],
    ['Breakpoints and Watchpoints',
     '',
     'info watch',
     '',
     'Show defined watchpoints.'],
    ['Breakpoints and Watchpoints',
     '',
     'clear',
     '',
     'Delete breakpoints at next instruction.'],
    ['Breakpoints and Watchpoints',
     '',
     'clear',
     '[<file>:]function',
     'Delete breakpoints on entry to <span class="args">function</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'clear',
     '[<file>:]<line>',
     'Delete breakpoints on source line <span class="args">line</span>.'],
    ['Breakpoints and Watchpoints',
     '',
     'delete',
     '[<n>]',
     'Delete breakpoints [or breakpoint <span class="args">n</span>].'],
    ['Breakpoints and Watchpoints',
     '',
     'disable',
     '[<n>]',
     'Disable breakpoints [or breakpoint <span class="args">n</span>].'],
    ['Breakpoints and Watchpoints',
     '',
     'enable once',
     '[<n>]',
     'Enable breakpoints [or breakpoint <span class="args">n</span>]; disable when reached.'],
    ['Breakpoints and Watchpoints',
     '',
     'enable del',
     '[<n>]',
     'Enable breakpoints [or breakpoint <span class="args">n</span>]; delete when reached.'],
    ['Breakpoints and Watchpoints',
     '',
     'ignore',
     '<n> <count>',
     'Ignore breakpoint <span class="args">n</span> <span class="args">count</span> times.'],

    ['Program Stack',
     'bt',
     'backtrace',
     '[<n>]',
     'Print trace of all frames in stack; or of <span class="args">n</span> frames.'],
    ['Program Stack',
     '',
     'frame',
     '[<n>]',
     'Select frame number <span class="args">n</span> frames, or frame at address <span class="args">n</span>. If no <span class="args">n</span>, display current frame.'],
    ['Program Stack',
     '',
     'up',
     '<n>',
     'Select frame <span class="args">n</span> frames up.'],
    ['Program Stack',
     '',
     'down',
     '<n>',
     'Select frame <span class="args">n</span> frames down.'],
    ['Program Stack',
     '',
     'info frame',
     '<addr>',
     'Describe selected frame, or frame at <span class="args">addr</span>.'],
    ['Program Stack',
     '',
     'info args',
     '<addr>',
     'Describe arguments of selected frame.'],
    ['Program Stack',
     '',
     'info locals',
     '',
     'Describe local variables of selected frame.'],
    ['Program Stack',
     '',
     'info reg',
     '[<rn>]',
     'Describe register values (for registers <span class="args">rn</span>).'],
    ['Program Stack',
     '',
     'info catch',
     '',
     'Describe exception handlers active in selected frame.'],

    ['Display/Inspect',
     '',
     'print',
     '[/<f>] [<expr>]',
     'Show last value $ [or of <span class="args">expr</span>], using format <span class="args">f</span>.'\
     + ' Format specification: <code>x</code>: hexadecimal, <code>d</code>: signed decimal,  <code>u</code>: unsigned decimal,'\
     + '  <code>o</code>: octal, <code>t</code>: binary,  <code>a</code>: absolute and relative address,  <code>c</code>: character,'\
     + '  <code>f</code>: floating point.'
     ],
    ['Display/Inspect',
     '',
     'call',
     '[/<f>] <expr>',
     'Like <code>print</code>, but does not display <code>void</code>.'],
    ['Display/Inspect',
     '',
     'x',
     '[/<N><u><f>] <expr>',
     'Examine memory at address <span class="args">expr</span>, using format <span class="args">f</span>.'\
     +' If <span class="args">N</span> is given, count of units to display, where units, <span class="args">u</span>,'\
     +' are one of: <code>b</code>: bytes, <code>h</code>: halfwords (two bytes), <code>w</code>: word (four bytes),'\
     +' <code>g</code>: giant words (eight bytes).'],
    ['Display/Inspect',
     '',
     'disassem',
     '[addr]',
     'Display memory as machine instructions.'],


    ['Automatic Display',
     '',
     'display',
     '[/<f>] <expr>',
     'Show value of <span class="args">expr</span> each time program stops [according to format <span class="args">f</span>].'],
    ['Automatic Display',
     '',
     'display',
     '',
     'Display all enabled expressions on list.'],
    ['Automatic Display',
     '',
     'undisplay',
     '[<n>]',
     'Remove <span class="args">n</span> from list of automatically displayed expressions.'],
    ['Automatic Display',
     '',
     'disable disp',
     '<n>',
     'Disable display for expression number <span class="args">n</span>.'],
    ['Automatic Display',
     '',
     'enable disp',
     '<n>',
     'Enable display for expression number <span class="args">n</span>.'],
    ['Automatic Display',
     '',
     'info display',
     '',
     'Numbered list of display expressions.'],

    ['Expressions',
     '',
     '',
     '<expr>',
     'An expression in C, C++, or Module-2 (including function calls).'],
    ['Expressions',
     '',
     '',
     '<addr>@<len>',
     'An array of <span class="args">len</span> elements beginning at <span class="args">addr</span>.'],
    ['Expressions',
     '',
     '',
     '<file>::<nm>',
     'A variable or function <span class="args">nm</span> defined in <span class="args">file</span>.'],
    ['Expressions',
     '',
     '',
     '{<type>}<addr>',
     'Read memory at <span class="args">addr</span> as <span class="args">type</span>.'],
    ['Expressions',
     '',
     '',
     '$',
     'Most recent displayed value.'],
    ['Expressions',
     '',
     '',
     '$<n>',
     '<i>n</i>th displayed value.'],
    ['Expressions',
     '',
     '',
     '$$',
     'Displayed value previous to <span class="args">$</span>.'],
    ['Expressions',
     '',
     '',
     '$$<n>',
     '<i>n</i>th displayed value back from <span class="args">$</span>.'],
    ['Expressions',
     '',
     '',
     '$_',
     'Last address examined with <span class="args">x</span>.'],
    ['Expressions',
     '',
     '',
     '$__',
     'Value at address <span class="args">$_</span>.'],
    ['Expressions',
     '',
     '',
     '$var',
     'Convenience variable; assign any value.'],
    ['Expressions',
     '',
     'show values',
     '[<n>]',
     'Show last 10 values [or surrounding <span class="args">$n</span>].'],
    ['Expressions',
     '',
     'show conv',
     '',
     'Display all convenience variables.'],

    ['Symbol Table',
     '',
     'info address',
     '<s>',
     'Show where symbol <span class="args">s</span>] is stored.'],
    ['Symbol Table',
     '',
     'info func',
     '<regexp>',
     'Show names, types of defined functions (all, or matching <span class="args">regexp</span>).'],
    ['Symbol Table',
     '',
     'info var',
     '<regexp>',
     'Show names, types of global variables (all, or matching <span class="args">regexp</span>).'],
    ['Symbol Table',
     '',
     'whatis',
     '[<expr>]',
     'Show data type of <span class="args">expr</span> [or $] without evaluating.'],
    ['Symbol Table',
     '',
     'ptype',
     '[<expr>]',
     'Show data type and detail of <span class="args">expr</span> [or $] without evaluating.'],
    ['Symbol Table',
     '',
     'ptype',
     '<type>',
     'Describe type, struct, union, or enum.'],

    ['Signal Handling',
     '',
     'handle',
     '<signal> <action>',
     'specify GDB actions for <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> print',
     '',
     'Announce <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> noprint',
     '',
     'Be silent for <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> stop',
     '',
     'Halt execution on <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> nostop',
     '',
     'Do not halt execution on <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> pass',
     '',
     'Allow program to handle <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'handle <span class="args">signal</span> nopass',
     '',
     'Do not allow program to handle <span class="args">signal</span>.'],
    ['Signal Handling',
     '',
     'info signals',
     '',
     'Show table of signals, with GDB action for each.'],

    ['Debugging Targets',
     '',
     'target',
     '<type> <param>',
     'Connect to target machine, process, or file.'],
    ['Debugging Targets',
     '',
     'help target',
     '',
     'Display available targets.'],
    ['Debugging Targets',
     '',
     'attach',
     '<param>',
     'Connect to another process.'],
    ['Debugging Targets',
     '',
     'detach',
     '',
     'Release target from GDB control.'],

    ['Controlling GDB',
     '',
     'set complaint',
     '<limit>',
     'Set number of messages on unusual symbols.'],
    ['Controlling GDB',
     '',
     'show complaint',
     '',
     'Show number of messages on unusual symbols.'],
    ['Controlling GDB',
     '',
     'set confirm',
     'on/off',
     'Enable/disable cautionary queries.'],
    ['Controlling GDB',
     '',
     'show confirm',
     '',
     'Show cautionary queries setting.'],
    ['Controlling GDB',
     '',
     'set editing',
     'on/off',
     'Set <code>readline</code> command-line editing.'],
    ['Controlling GDB',
     '',
     'show editing',
     '',
     'Show <code>readline</code> command-line editing.'],
    ['Controlling GDB',
     '',
     'set height',
     '<lpp>',
     'Set number of lines before pause in display.'],
    ['Controlling GDB',
     '',
     'show height',
     '',
     'Show number of lines before pause in display.'],
    ['Controlling GDB',
     '',
     'set language',
     '<lang>',
     'Set language for GDB expressions (<code>auto</code>, <code>c</code>, or <code>modula-2</code>.'],
    ['Controlling GDB',
     '',
     'show language',
     '',
     'Show language for GDB expressions.'],
    ['Controlling GDB',
     '',
     'set listsize',
     '<n>',
     'Set number of lines shown by <code>list</code>.'],
    ['Controlling GDB',
     '',
     'show listsize',
     '',
     'Show number of lines shown by <code>list</code>.'],
    ['Controlling GDB',
     '',
     'set prompt',
     '<str>',
     'Set GDB prompt to <span class="args">str</span>.'],
    ['Controlling GDB',
     '',
     'show prompt',
     '',
     'Show GDB prompt string.'],
    ['Controlling GDB',
     '',
     'set radix',
     'base',
     'Set octal, decimal, or hex number representation.'],
    ['Controlling GDB',
     '',
     'show radix',
     '',
     'Show octal, decimal, or hex number representation.'],
    ['Controlling GDB',
     '',
     'set verbose',
     'on/off',
     'Set displaying of message when loading symbols.'],
    ['Controlling GDB',
     '',
     'show verbose',
     '',
     'Show displaying of message when loading symbols.'],
    ['Controlling GDB',
     '',
     'set width',
     '<cpl>',
     'Set number of characters before line wrap.'],
    ['Controlling GDB',
     '',
     'show width',
     '',
     'Show number of characters before line wrap.'],
    ['Controlling GDB',
     '',
     'set write',
     'on/off',
     'Allow/disallow patching binary or core files.'],
    ['Controlling GDB',
     '',
     'show width',
     '',
     'Show allow/disallow patching of binary or core files.'],
    ['Controlling GDB',
     '',
     'print address',
     'on/off',
     'Print memory address in stacks, values.'],
    ['Controlling GDB',
     '',
     'print array',
     'on/off',
     'Compact or attractive format for arrays.'],
    ['Controlling GDB',
     '',
     'print demangl',
     'on/off',
     'Demangled source or internal form for C++ symbols.'],
    ['Controlling GDB',
     '',
     'print elements',
     '<limit>',
     'Number of array elements to display.'],
    ['Controlling GDB',
     '',
     'print object',
     '<limit>',
     'Print C++ derived  types for objects.'],
    ['Controlling GDB',
     '',
     'print pretty',
     'on/off',
     'Indented or compact struct display.'],
    ['Controlling GDB',
     '',
     'print union',
     'on/off',
     'Display of union members.'],
    ['Controlling GDB',
     '',
     'print vtble',
     'on/off',
     'Display of C++ virtual function tables.'],
    ['Controlling GDB',
     '',
     'show commands',
     '',
     'Show last 10 commands.'],
    ['Controlling GDB',
     '',
     'show commands',
     '<n>',
     'Show 10 commands around number <span class="args">n</span>.'],
    ['Controlling GDB',
     '',
     'show commands +',
     '',
     'Show next 10 commands.'],

    ['Working Files',
     '',
     'file',
     '[<file>]',
     'Use <span class="args">file</span> for both symbols and executable; if not given, discard both.'],
    ['Working Files',
     '',
     'core',
     '[<file>]',
     'Read <span class="args">file</span> as core dump, or, if not given, discard.'],
    ['Working Files',
     '',
     'exec',
     '[<file>]',
     'Use <span class="args">file</span> as executable only, if not given, discard.'],
    ['Working Files',
     '',
     'symbol',
     '[<file>]',
     'Use symbol table from <span class="args">file</span>, or, if not given, discard.'],
    ['Working Files',
     '',
     'load',
     '<file>',
     'Dynamically link <span class="args">file</span> and add its symbols.'],
    ['Working Files',
     '',
     'add-sym',
     '<file> <addr>',
     'Read additional symbols from <span class="args">file</span>, dynamically loaded at <span class="args">addr</span>.'],
    ['Working Files',
     '',
     'info files',
     '',
     'Display working files and targets in use.'],
    ['Working Files',
     '',
     'path',
     '<dirs>',
     'Add <span class="args">dirs</span> to front of path searched for executable and symbol files.'],
    ['Working Files',
     '',
     'show path',
     '',
     'Display executable and symbol file path.'],
    ['Working Files',
     '',
     'info share',
     '',
     'List names of shared libraries currently loaded.'],

    ['Source Files',
     '',
     'dir',
     '<names>',
     'Add directory <span class="args">names</span> to front of source path.'],
    ['Source Files',
     '',
     'dir',
     '',
     'Clear current source path.'],
    ['Source Files',
     '',
     'show dir',
     '',
     'Show current source path.'],
    ['Source Files',
     '',
     'list',
     '',
     'Show next ten lines of source.'],
    ['Source Files',
     '',
     'list -',
     '',
     'Show previous ten lines of source.'],
    ['Source Files',
     '',
     'list',
     '[<file>:] <num>',
     'Show lines of source surrounding line number <span class="args">num</span> [in <span class="args">file</span>].'],
    ['Source Files',
     '',
     'list',
     '[<file>:] <func>',
     'Show beginning of function <span class="args">func</span> [in <span class="args">file</span>].'],
    ['Source Files',
     '',
     'list',
     '+offset',
     'Show source lines <span class="args">offset</span> lines after last printed.'],
    ['Source Files',
     '',
     'list',
     '-offset',
     'Show source lines <span class="args">offset</span> lines before last printed.'],
    ['Source Files',
     '',
     'list',
     '*address',
     'Show source lines containing <span class="args">address</span>.'],
    ['Source Files',
     '',
     'list',
     '[<file>:] <first>, <last>',
     'Show source lines from <span class="args">first</span> to <span class="args">last</span> [in <span class="args">file</span>].'],


    ['Source Files',
     '',
     'info line',
     '<num>',
     'Show starting, ending addresses of compiled code for source line <span class="args">num</span>.'],
    ['Source Files',
     '',
     'info source',
     '',
     'Show name of current source file.'],
    ['Source Files',
     '',
     'info sources',
     '',
     'List all source files in use.'],
    ['Source Files',
     '',
     'forw',
     '<regexp>',
     'Search following source lines for regular expression <span class="args">regexp</span>.'],
    ['Source Files',
     '',
     'rev',
     '<regexp>',
     'Search preceding source lines for regular expression <span class="args">regexp</span>.'],


    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-x</span>',
     'gdb',
     '',
     'Run GDB under Emacs.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">CTL</span>-h m</span>',
     '',
     '',
     'Describe GDB mode.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-s</span>',
     'step',
     '',
     'Step one line.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-n</span>',
     'next',
     '',
     'Next line.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-i</span>',
     'stepi',
     '',
     'Step one instruction.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">CTL</span>-c <span class="specialkey">C</span>-f</span>',
     'finish',
     '',
     'Finish current stack frame.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-c</span>',
     'up',
     '',
     'Up <span class="args">arg</span> frames.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">ALT</span>-d</span>',
     'down',
     '',
     'Down <span class="args">arg</span> frames.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">CTL</span>-x &amp;</span>',
     'finish',
     '',
     'Copy number from point, insert at end.'],
    ['Emacs',
     '<span class="keygroup"><span class="specialkey">CTL</span>-x <span class="specialkey">SPC</span></span>',
     '',
     '',
     'Set break at point (in source file).'],

]

section_template = """\
<div class="section">
    <p class="sectiontitle">%(title)s</p>
    <dl class="commandhelp">
    %(contents)s
    </dl>
</div>
"""

def compose_entry(key, command, args, desc):
    result = []
    result.append('    <dt class="commandterm">')
    if key:
        result.append('        <span class="commandshortcut">%s</span>' % key)
    if command:
        result.append('        %s' % command)
    else:
        result.append('        &nbsp;')
    if args:
        args = args.split(' ')
        dargs = []
        for a in args:
            if '<' in a:
                a = a.replace('<', '<span class="args"$$$').replace('>', '</span>').replace('$$$', '>')
            else:
                a = '<span class="constargs">%s</span>' % a
            if ']' in a:
                a = a.replace('[', '<span class="optargs">[</span>').replace(']', '<span class="optargs">]</span>')
                dargs.append(a)
            else:
                dargs.append(' ' + a)
        args = " ".join(dargs)
        result.append('            %s' % args)
    result.append('    </dt>')
    result.append('    <dd class="commanddesc">')
    result.append('        %s' % desc)
    result.append('    </dd>')
    return "\n".join(result)

def build_sections():
    section_titles = []
    section_contents = {}
    for x in GDB_REFDEFS:
        print x
        if x[0] not in section_titles:
            section_titles.append(x[0])
            section_contents[x[0]] = []
        section_contents[x[0]].append((x[1], x[2], x[3], x[4]))
    return section_titles, section_contents

def compose_javascript(section_titles, section_files):
    j1 = []
    for s in section_titles:
        j1.append('    displayHTML = displayHTML + readUrl("%s");' % section_files[s])
    j1 = "\n".join(j1)
    return js_template % j1

def build_popup(section_titles, section_files):
    for s in section_titles:
        print('["%s", "%s"],' % (s, section_files[s]))
#["File Control", "file_control.html"], ["Buffer Control", "buffer_control.html"], ["Minibuffer", "minibuffer.html"], ["Cursor Navigation", "cursor_navigation.html"], ["Bookmarks", "bookmark.html"]

def build_all(output_dir='Content'):
    if output_dir != '.' \
        and not os.path.samefile(os.path.abspath(os.curdir), os.path.abspath(output_dir)):
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
            else:
                shutil.rmtree(output_dir)
                os.makedirs(output_dir)
    else:
        sys.stderr.write('Build directory is current directory: skipping directory creation\n')

    output = open(os.path.join(output_dir, "content.css"), "w")
    output.write(css)
    output.close()

    section_titles, section_contents = build_sections()
    section_files = {}
    print section_titles
    for s in section_titles:
        filepath = s.lower().replace('commands', '').replace(',', '').replace(' ', '_').replace('/', '_').strip('_').replace('__', '_') + ".html"
        section_files[s] = filepath
        output = open(os.path.join(output_dir, filepath), "w")

        entries = []
        for c in section_contents[s]:
            print c
            entries.append(compose_entry(c[0], c[1], c[2], c[3]))

        args = {
            'title': s,
            'contents': '\n'.join(entries)
        }
        section_content = section_template % args

        # for debugging
#        output.write('<head><style type="text/css">\n')
#        output.write(css)
#        output.write('</style></head>\n')
#        output.write('\n')

        output.write(section_content)
        output.close()

    output = open("GdbCommands.js", "w")
    output.write(compose_javascript(section_titles, section_files))
    output.close()

    output = open(os.path.join(output_dir, "coda.html"), "w")
    output.write(coda)
    output.close()

    build_popup(section_titles, section_files)


build_all(output_dir='Content')
